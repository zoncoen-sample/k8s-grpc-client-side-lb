// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/information.proto

package information

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetHostnameRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHostnameRequest) Reset()         { *m = GetHostnameRequest{} }
func (m *GetHostnameRequest) String() string { return proto.CompactTextString(m) }
func (*GetHostnameRequest) ProtoMessage()    {}
func (*GetHostnameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30127339f0f06ba, []int{0}
}

func (m *GetHostnameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHostnameRequest.Unmarshal(m, b)
}
func (m *GetHostnameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHostnameRequest.Marshal(b, m, deterministic)
}
func (m *GetHostnameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHostnameRequest.Merge(m, src)
}
func (m *GetHostnameRequest) XXX_Size() int {
	return xxx_messageInfo_GetHostnameRequest.Size(m)
}
func (m *GetHostnameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHostnameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHostnameRequest proto.InternalMessageInfo

type GetHostnameResponse struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetHostnameResponse) Reset()         { *m = GetHostnameResponse{} }
func (m *GetHostnameResponse) String() string { return proto.CompactTextString(m) }
func (*GetHostnameResponse) ProtoMessage()    {}
func (*GetHostnameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d30127339f0f06ba, []int{1}
}

func (m *GetHostnameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHostnameResponse.Unmarshal(m, b)
}
func (m *GetHostnameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHostnameResponse.Marshal(b, m, deterministic)
}
func (m *GetHostnameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHostnameResponse.Merge(m, src)
}
func (m *GetHostnameResponse) XXX_Size() int {
	return xxx_messageInfo_GetHostnameResponse.Size(m)
}
func (m *GetHostnameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHostnameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHostnameResponse proto.InternalMessageInfo

func (m *GetHostnameResponse) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func init() {
	proto.RegisterType((*GetHostnameRequest)(nil), "GetHostnameRequest")
	proto.RegisterType((*GetHostnameResponse)(nil), "GetHostnameResponse")
}

func init() { proto.RegisterFile("proto/information.proto", fileDescriptor_d30127339f0f06ba) }

var fileDescriptor_d30127339f0f06ba = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0xcc, 0x4b, 0xcb, 0x2f, 0xca, 0x4d, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03, 0x8b,
	0x28, 0x89, 0x70, 0x09, 0xb9, 0xa7, 0x96, 0x78, 0xe4, 0x17, 0x97, 0xe4, 0x25, 0xe6, 0xa6, 0x06,
	0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0x19, 0x72, 0x09, 0xa3, 0x88, 0x16, 0x17, 0xe4, 0xe7,
	0x15, 0xa7, 0x0a, 0x49, 0x71, 0x71, 0x64, 0x40, 0xc5, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83,
	0xe0, 0x7c, 0x23, 0x4f, 0x2e, 0x6e, 0x4f, 0x84, 0xe9, 0x42, 0x56, 0x5c, 0xdc, 0x48, 0x26, 0x08,
	0x09, 0xeb, 0x61, 0xda, 0x22, 0x25, 0xa2, 0x87, 0xc5, 0x12, 0x25, 0x86, 0x24, 0x36, 0xb0, 0xd3,
	0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xf1, 0xa2, 0x97, 0xb5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InformationClient is the client API for Information service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InformationClient interface {
	GetHostname(ctx context.Context, in *GetHostnameRequest, opts ...grpc.CallOption) (*GetHostnameResponse, error)
}

type informationClient struct {
	cc *grpc.ClientConn
}

func NewInformationClient(cc *grpc.ClientConn) InformationClient {
	return &informationClient{cc}
}

func (c *informationClient) GetHostname(ctx context.Context, in *GetHostnameRequest, opts ...grpc.CallOption) (*GetHostnameResponse, error) {
	out := new(GetHostnameResponse)
	err := c.cc.Invoke(ctx, "/Information/GetHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformationServer is the server API for Information service.
type InformationServer interface {
	GetHostname(context.Context, *GetHostnameRequest) (*GetHostnameResponse, error)
}

func RegisterInformationServer(s *grpc.Server, srv InformationServer) {
	s.RegisterService(&_Information_serviceDesc, srv)
}

func _Information_GetHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformationServer).GetHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Information/GetHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformationServer).GetHostname(ctx, req.(*GetHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Information_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Information",
	HandlerType: (*InformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostname",
			Handler:    _Information_GetHostname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/information.proto",
}
